import sqlite3
import sounddevice as sd
import speech_recognition as sr
import wave
import os
import cv2

# Load the pre-trained face recognition model
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')

# Initialize the webcam
cap = cv2.VideoCapture(0)
cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)
cap.set(cv2.CAP_PROP_FPS, 30)

# Check if the webcam is opened successfully
if not cap.isOpened():
    print("Error: Unable to open the webcam.")
    # Add any necessary error handling or exit the program

# Create a speech recognizer instance
recognizer = sr.Recognizer()

# Connect to SQLite database
db_file = 'attendance.db'
conn = sqlite3.connect(db_file)

# Create a table for attendance if not exists
cursor = conn.cursor()
cursor.execute('''
    CREATE TABLE IF NOT EXISTS attendance (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        date TEXT,
        time TEXT,
        person_id TEXT,
        status TEXT
    )
''')
conn.commit()

# Function to record audio using sounddevice
def record_audio(duration=5):
    audio_data = sd.rec(int(duration * 44100), channels=1, dtype='int16')
    sd.wait()
    return audio_data

# Function to write audio data to a WAV file
def write_wav(filename, audio_data, sample_rate=44100):
    with wave.open(filename, 'wb') as wf:
        wf.setnchannels(1)
        wf.setsampwidth(2)
        wf.setframerate(sample_rate)
        wf.writeframes(audio_data.tobytes())

# Main loop for continuous operation
while True:
    try:
        # Capture frame-by-frame
        ret, frame = cap.read()

        # Check if the frame is captured successfully
        if not ret:
            print("Error: Unable to capture frame.")
            # Add any necessary error handling or exit the loop

        # Convert the frame to grayscale for face detection
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

        # Detect faces in the frame
        faces = face_cascade.detectMultiScale(gray, scaleFactor=1.3, minNeighbors=5)

        # Draw rectangles around the detected faces
        for (x, y, w, h) in faces:
            cv2.rectangle(frame, (x, y), (x + w, y + h), (255, 0, 0), 2)

        # Flip the frame vertically to correct orientation
        frame = cv2.flip(frame, 1)

        # Display the resulting frame
        cv2.imshow('Face Recognition', frame)

        # Say 'Clock In' to mark attendance (or 'Clock Out' or 'Stop' to exit)
        print("Say 'Clock In' or 'Clock Out' to mark attendance (or 'Stop' to exit):")

        # Record audio until 'Stop' is said
        audio_data = record_audio()
        write_wav('temp.wav', audio_data)

        with sr.AudioFile('temp.wav') as f:
            audio = recognizer.record(f)

            try:
                text = recognizer.recognize_google(audio).lower()
                print("Recognized Text:", text)

                if "clock in" in text or "clock out" in text:
                    person_id = input("Enter person's ID: ")
                    status = "Clock In" if "clock in" in text else "Clock Out"
                    print(f"{status} - Attendance Marked for person with ID {person_id}!")

                    # Store attendance information in the database
                    cursor.execute("INSERT INTO attendance (date, time, person_id, status) VALUES (date('now'), time('now', 'localtime'), ?, ?)", (person_id, status))
                    conn.commit()

                elif "stop" in text:
                    print("Recording stopped.")
                    break  # Exit the loop

            except sr.UnknownValueError:
                print("Could not understand audio.")
            except sr.RequestError as e:
                print(f"Error with the recognition service; {e}")

        # Delete the temporary WAV file
        os.remove('temp.wav')

        # Break the loop if 'q' is pressed
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    except KeyboardInterrupt:
        # Allow the user to exit the loop using Ctrl+C
        print("Recording stopped.")
        break
    except Exception as e:
        print(f"An error occurred: {e}")

# Release the webcam and close all windows
cap.release()
cv2.destroyAllWindows()

# Close the SQLite connection
conn.close()
