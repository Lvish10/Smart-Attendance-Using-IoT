import cv2
import sounddevice as sd
import speech_recognition as sr
import wave
import os
import threading
import sqlite3

# Load the pre-trained face recognition model
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')

# Initialize the webcam with lower resolution and frame rate
cap = cv2.VideoCapture(0)
cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)
cap.set(cv2.CAP_PROP_FPS, 15)  # Lower frame rate

# Create a speech recognizer instance
recognizer = sr.Recognizer()

# Global flag to control the threads
exit_flag = False

# Function to record audio using sounddevice
def record_audio(duration=5):
    audio_data = sd.rec(int(duration * 44100), channels=1, dtype='int16')
    sd.wait()
    return audio_data

# Function to write audio data to a WAV file
def write_wav(filename, audio_data, sample_rate=44100):
    with wave.open(filename, 'wb') as wf:
        wf.setnchannels(1)
        wf.setsampwidth(2)
        wf.setframerate(sample_rate)
        wf.writeframes(audio_data.tobytes())

# Function to handle database operations in a separate thread
def database_thread():
    global exit_flag
    try:
        # Connect to SQLite database
        db_file = 'attendance.db'
        conn = sqlite3.connect(db_file)
        cursor = conn.cursor()

        # Create a table for attendance if not exists
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS attendance (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                date TEXT,
                time TEXT,
                person_id TEXT,
                status TEXT
            )
        ''')
        conn.commit()

        while not exit_flag:
            # Simulate a database operation by printing a message
            print("Database thread: Performing database operation")

            # Sleep for a while to simulate processing time
            threading.Event().wait(5)  # Sleep for 5 seconds (adjust as needed)

    except Exception as e:
        print(f"Database thread: An error occurred: {e}")
    finally:
        # Close the SQLite connection
        conn.close()

# Function to handle face recognition in a separate thread
def face_recognition_thread():
    global exit_flag
    while not exit_flag:
        ret, frame = cap.read()
        if not ret:
            print("Error: Unable to capture frame.")
            break

        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        faces = face_cascade.detectMultiScale(gray, scaleFactor=1.3, minNeighbors=5)

        for (x, y, w, h) in faces:
            cv2.rectangle(frame, (x, y), (x + w, y + h), (255, 0, 0), 2)

        frame = cv2.flip(frame, 1)
        cv2.imshow('Face Recognition', frame)

        if cv2.waitKey(1) & 0xFF == ord('q'):
            exit_flag = True
            break

# Function to handle audio processing in a separate thread
def audio_processing_thread():
    global exit_flag
    try:
        # Connect to SQLite database
        db_file = 'attendance.db'
        conn = sqlite3.connect(db_file)
        cursor = conn.cursor()

        # Create a table for attendance if not exists
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS attendance (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                date TEXT,
                time TEXT,
                person_id TEXT,
                status TEXT
            )
        ''')
        conn.commit()

        while not exit_flag:
            print("Say 'Clock In', 'Clock Out', or 'Stop' to exit:")

            audio_data = record_audio()
            write_wav('temp.wav', audio_data)

            with sr.AudioFile('temp.wav') as f:
                audio = recognizer.record(f)

                try:
                    text = recognizer.recognize_google(audio).lower()
                    print("Recognized Text:", text)

                    if "clock in" in text or "clock out" in text:
                        person_id = input("Enter person's ID: ")
                        status = "Clock In" if "clock in" in text else "Clock Out"
                        print(f"{status} - Attendance Marked for person with ID {person_id}!")

                        # Store attendance information in the database
                        cursor.execute("INSERT INTO attendance (date, time, person_id, status) VALUES (date('now'), time('now', 'localtime'), ?, ?)", (person_id, status))
                        conn.commit()

                    elif "stop" in text:
                        print("Recording stopped.")
                        exit_flag = True

                except sr.UnknownValueError:
                    print("Could not understand audio.")
                except sr.RequestError as e:
                    print(f"Error with the recognition service; {e}")

            os.remove('temp.wav')

    except Exception as e:
        print(f"An error occurred: {e}")
    finally:
        # Close the SQLite connection
        conn.close()

# Create threads for database operations, face recognition, and audio processing
db_thread = threading.Thread(target=database_thread)
face_thread = threading.Thread(target=face_recognition_thread)
audio_thread = threading.Thread(target=audio_processing_thread)

# Start all threads
db_thread.start()
face_thread.start()
audio_thread.start()

# Wait for all threads to finish
db_thread.join()
face_thread.join()
audio_thread.join()

# Release the webcam and close all windows
cap.release()
cv2.destroyAllWindows()
